#############################################################################
# Makefile for building: Fly
# Generated by qmake (2.01a) (Qt 4.8.4) on: Fri May 23 15:05:06 2014
# Project:  Fly.pro
# Template: app
# Command: /usr/bin/qmake-qt4 -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile Fly.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_PHONON_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/phonon -I/usr/include/qt4 -I/home/leni/SFML-1.6/include -I/usr/include/qt4/phonon_compat -I.
LINK          = g++
LFLAGS        = 
LIBS          = $(SUBLIBS)  -L/usr/lib/x86_64-linux-gnu -L/usr/local/lib/ -lX11 -lsfml-window -lsfml-system -lsfml-graphics -lsfml-audio -lphonon -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp \
		entite.cpp \
		qsfml.cpp \
		qsfcanvas.cpp \
		environment.cpp \
		imagemanager.cpp \
		animatedmanager.cpp \
		animatedsprite.cpp \
		displaymanager.cpp \
		ingame.cpp \
		ingameui.cpp \
		fly.cpp \
		tzellipse.cpp \
		carte.cpp \
		soundmanager.cpp \
		triggerevent.cpp moc_qsfml.cpp \
		moc_qsfcanvas.cpp \
		moc_environment.cpp \
		moc_ingame.cpp \
		moc_ingameui.cpp \
		moc_fly.cpp \
		moc_soundmanager.cpp
OBJECTS       = main.o \
		entite.o \
		qsfml.o \
		qsfcanvas.o \
		environment.o \
		imagemanager.o \
		animatedmanager.o \
		animatedsprite.o \
		displaymanager.o \
		ingame.o \
		ingameui.o \
		fly.o \
		tzellipse.o \
		carte.o \
		soundmanager.o \
		triggerevent.o \
		moc_qsfml.o \
		moc_qsfcanvas.o \
		moc_environment.o \
		moc_ingame.o \
		moc_ingameui.o \
		moc_fly.o \
		moc_soundmanager.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/declarative_debug.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		Fly.pro
QMAKE_TARGET  = Fly
DESTDIR       = 
TARGET        = Fly

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)
	{ test -n "$(DESTDIR)" && DESTDIR="$(DESTDIR)" || DESTDIR=.; } && test $$(gdb --version | sed -e 's,[^0-9]\+\([0-9]\)\.\([0-9]\).*,\1\2,;q') -gt 72 && gdb --nx --batch --quiet -ex 'set confirm off' -ex "save gdb-index $$DESTDIR" -ex quit '$(TARGET)' && test -f $(TARGET).gdb-index && objcopy --add-section '.gdb_index=$(TARGET).gdb-index' --set-section-flags '.gdb_index=readonly' '$(TARGET)' '$(TARGET)' && rm -f $(TARGET).gdb-index || true

Makefile: Fly.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/declarative_debug.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/x86_64-linux-gnu/libQtGui.prl \
		/usr/lib/x86_64-linux-gnu/libQtCore.prl
	$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile Fly.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_phonon.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/debug.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/declarative_debug.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/x86_64-linux-gnu/libQtGui.prl:
/usr/lib/x86_64-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile Fly.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/Fly1.0.0 || $(MKDIR) .tmp/Fly1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/Fly1.0.0/ && $(COPY_FILE) --parents entite.h qsfml.h qsfcanvas.h environment.h imagemanager.h animatedmanager.h animatedsprite.h displaymanager.h ingame.h ingameui.h fly.h tzellipse.h carte.h soundmanager.h triggerevent.h .tmp/Fly1.0.0/ && $(COPY_FILE) --parents main.cpp entite.cpp qsfml.cpp qsfcanvas.cpp environment.cpp imagemanager.cpp animatedmanager.cpp animatedsprite.cpp displaymanager.cpp ingame.cpp ingameui.cpp fly.cpp tzellipse.cpp carte.cpp soundmanager.cpp triggerevent.cpp .tmp/Fly1.0.0/ && (cd `dirname .tmp/Fly1.0.0` && $(TAR) Fly1.0.0.tar Fly1.0.0 && $(COMPRESS) Fly1.0.0.tar) && $(MOVE) `dirname .tmp/Fly1.0.0`/Fly1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/Fly1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_qsfml.cpp moc_qsfcanvas.cpp moc_environment.cpp moc_ingame.cpp moc_ingameui.cpp moc_fly.cpp moc_soundmanager.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_qsfml.cpp moc_qsfcanvas.cpp moc_environment.cpp moc_ingame.cpp moc_ingameui.cpp moc_fly.cpp moc_soundmanager.cpp
moc_qsfml.cpp: qsfml.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) qsfml.h -o moc_qsfml.cpp

moc_qsfcanvas.cpp: qsfml.h \
		imagemanager.h \
		environment.h \
		fly.h \
		entite.h \
		animatedsprite.h \
		tzellipse.h \
		carte.h \
		displaymanager.h \
		animatedmanager.h \
		qsfcanvas.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) qsfcanvas.h -o moc_qsfcanvas.cpp

moc_environment.cpp: fly.h \
		entite.h \
		animatedsprite.h \
		imagemanager.h \
		tzellipse.h \
		carte.h \
		displaymanager.h \
		qsfml.h \
		animatedmanager.h \
		environment.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) environment.h -o moc_environment.cpp

moc_ingame.cpp: qsfcanvas.h \
		qsfml.h \
		imagemanager.h \
		environment.h \
		fly.h \
		entite.h \
		animatedsprite.h \
		tzellipse.h \
		carte.h \
		displaymanager.h \
		animatedmanager.h \
		ingameui.h \
		ingame.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) ingame.h -o moc_ingame.cpp

moc_ingameui.cpp: ingameui.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) ingameui.h -o moc_ingameui.cpp

moc_fly.cpp: entite.h \
		animatedsprite.h \
		imagemanager.h \
		tzellipse.h \
		carte.h \
		fly.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) fly.h -o moc_fly.cpp

moc_soundmanager.cpp: soundmanager.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) soundmanager.h -o moc_soundmanager.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

main.o: main.cpp ingame.h \
		qsfcanvas.h \
		qsfml.h \
		imagemanager.h \
		environment.h \
		fly.h \
		entite.h \
		animatedsprite.h \
		tzellipse.h \
		carte.h \
		displaymanager.h \
		animatedmanager.h \
		ingameui.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

entite.o: entite.cpp entite.h \
		animatedsprite.h \
		imagemanager.h \
		tzellipse.h \
		carte.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o entite.o entite.cpp

qsfml.o: qsfml.cpp qsfml.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o qsfml.o qsfml.cpp

qsfcanvas.o: qsfcanvas.cpp qsfcanvas.h \
		qsfml.h \
		imagemanager.h \
		environment.h \
		fly.h \
		entite.h \
		animatedsprite.h \
		tzellipse.h \
		carte.h \
		displaymanager.h \
		animatedmanager.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o qsfcanvas.o qsfcanvas.cpp

environment.o: environment.cpp environment.h \
		fly.h \
		entite.h \
		animatedsprite.h \
		imagemanager.h \
		tzellipse.h \
		carte.h \
		displaymanager.h \
		qsfml.h \
		animatedmanager.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o environment.o environment.cpp

imagemanager.o: imagemanager.cpp imagemanager.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o imagemanager.o imagemanager.cpp

animatedmanager.o: animatedmanager.cpp animatedmanager.h \
		animatedsprite.h \
		imagemanager.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o animatedmanager.o animatedmanager.cpp

animatedsprite.o: animatedsprite.cpp animatedsprite.h \
		imagemanager.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o animatedsprite.o animatedsprite.cpp

displaymanager.o: displaymanager.cpp displaymanager.h \
		qsfml.h \
		animatedmanager.h \
		animatedsprite.h \
		imagemanager.h \
		entite.h \
		tzellipse.h \
		carte.h \
		fly.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o displaymanager.o displaymanager.cpp

ingame.o: ingame.cpp ingame.h \
		qsfcanvas.h \
		qsfml.h \
		imagemanager.h \
		environment.h \
		fly.h \
		entite.h \
		animatedsprite.h \
		tzellipse.h \
		carte.h \
		displaymanager.h \
		animatedmanager.h \
		ingameui.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ingame.o ingame.cpp

ingameui.o: ingameui.cpp ingameui.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ingameui.o ingameui.cpp

fly.o: fly.cpp fly.h \
		entite.h \
		animatedsprite.h \
		imagemanager.h \
		tzellipse.h \
		carte.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o fly.o fly.cpp

tzellipse.o: tzellipse.cpp tzellipse.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tzellipse.o tzellipse.cpp

carte.o: carte.cpp carte.h \
		imagemanager.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o carte.o carte.cpp

soundmanager.o: soundmanager.cpp soundmanager.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o soundmanager.o soundmanager.cpp

triggerevent.o: triggerevent.cpp triggerevent.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o triggerevent.o triggerevent.cpp

moc_qsfml.o: moc_qsfml.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_qsfml.o moc_qsfml.cpp

moc_qsfcanvas.o: moc_qsfcanvas.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_qsfcanvas.o moc_qsfcanvas.cpp

moc_environment.o: moc_environment.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_environment.o moc_environment.cpp

moc_ingame.o: moc_ingame.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_ingame.o moc_ingame.cpp

moc_ingameui.o: moc_ingameui.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_ingameui.o moc_ingameui.cpp

moc_fly.o: moc_fly.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_fly.o moc_fly.cpp

moc_soundmanager.o: moc_soundmanager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_soundmanager.o moc_soundmanager.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

